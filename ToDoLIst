import tkinter as tk  
from tkinter import messagebox  

class HemaToDoList:  
    def __init__(self, master):  
        self.master = master  
        self.master.title("My To-Do List")  
        self.master.geometry("450x500")       
        self.master.configure(bg='#9370DB')  # Light purple background for main window

        # Initialize tasks list  
        self.tasks = []  

        # Title Frame  
        self.title_frame = tk.Frame(self.master, bg='#352576')  
        self.title_frame.pack(pady=20, fill=tk.X)  
        self.title_label = tk.Label(self.title_frame, text="To Do List", font=("Arial", 24, "bold"), bg='#352576', fg='white')  
        self.title_label.pack()  

        # Task Entry  
        self.task_entry = tk.Entry(self.master, width=35, font=("Arial", 14))  
        self.task_entry.pack(pady=10)  

        # Buttons Frame  
        self.buttons_frame = tk.Frame(self.master, bg='#F5F5DC')  
        self.buttons_frame.pack(pady=10)  
        button_color = '#352576'  # New background color for buttons

        # Add button with padding  
        self.add_button = tk.Button(self.buttons_frame, text="Add Task", width=12, command=self.add_task, bg=button_color, fg='white', font=("Arial", 12, "bold"))  
        self.add_button.grid(row=0, column=0, padx=10, pady=5)  

        # Delete button with padding  
        self.delete_button = tk.Button(self.buttons_frame, text="Delete Task", width=12, command=self.remove_task, bg=button_color, fg='white', font=("Arial", 12, "bold"))  
        self.delete_button.grid(row=0, column=1, padx=10, pady=5)  

        # Frame for Task List  
        self.task_frame = tk.Frame(self.master, bg='#FFFFFF')
        self.task_frame.pack(pady=10, fill=tk.BOTH, expand=True)  # Expand the frame to fill available space

        # Scrollbar for task list  
        self.task_scrollbar = tk.Scrollbar(self.task_frame)  
        self.task_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)  

        # Canvas for task list  
        self.task_canvas = tk.Canvas(self.task_frame, bg='#FFFFFF', yscrollcommand=self.task_scrollbar.set)  
        self.task_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)  

        self.task_scrollbar.config(command=self.task_canvas.yview)  

        # Frame to hold task boxes  
        self.task_box_frame = tk.Frame(self.task_canvas)  
        self.task_canvas.create_window((0, 0), window=self.task_box_frame, anchor='nw')  

        # Bind scrolling to mousewheel
        self.task_box_frame.bind("<Configure>", self.on_frame_configure)
        self.task_canvas.bind_all("<MouseWheel>", self._on_mousewheel)

        # Save and Load Buttons  
        self.save_load_frame = tk.Frame(self.master, bg='#F5F5DC')  
        self.save_load_frame.pack(pady=10)  
        self.save_button = tk.Button(self.save_load_frame, text="Save Tasks", width=12, command=self.save_tasks, bg=button_color, fg='white', font=("Arial", 12, "bold"))  
        self.save_button.grid(row=0, column=0, padx=10, pady=5)  
        self.load_button = tk.Button(self.save_load_frame, text="Load Tasks", width=12, command=self.load_tasks, bg=button_color, fg='white', font=("Arial", 12, "bold"))  
        self.load_button.grid(row=0, column=1, padx=10, pady=5)  

    # Function to add tasks  
    def add_task(self):  
        task = self.task_entry.get()  
        if task.strip():  
            self.tasks.append(task)  
            self.create_task_box(task)  # Create a new task box  
            self.task_entry.delete(0, tk.END)  
            self.update_scroll_region()  # Update the scroll region when new task is added
        else:  
            messagebox.showwarning("Input Error", "Please enter a valid task")  

    # Function to create task boxes in the task list  
    def create_task_box(self, task):  
        task_frame = tk.Frame(self.task_box_frame, bg='#9370DB', bd='2', relief="groove")  # Light purple background for task box  
        task_label = tk.Label(task_frame, text=f"â€¢ {task}", bg='#9370DB', fg='white', font=("Arial", 12, "bold"))  
        task_label.pack(padx=10, pady=5, anchor='w', fill='x')  # Left align the task text
        task_frame.pack(pady=5, padx=10, fill='x')  # Ensure the task box expands to fill available width

    # Function to remove selected task  
    def remove_task(self):  
        try:  
            selected_index = self.task_box_frame.winfo_children().index(self.task_box_frame.focus_get())  
            self.task_box_frame.winfo_children()[selected_index].destroy()  
            del self.tasks[selected_index]  
            self.update_scroll_region()  # Update the scroll region after deletion
        except IndexError:  
            messagebox.showwarning("Selection Error", "Select a task to delete")  

    # Function to save tasks to a file  
    def save_tasks(self):  
        try:  
            with open("my_tasks.txt", "w") as file:  
                for task in self.tasks:  
                    file.write(task + "\n")  
            messagebox.showinfo("Save Success", "Tasks saved successfully!")  
        except Exception as e:  
            messagebox.showerror("Save Error", f"An error occurred: {e}")  

    # Function to load tasks from a file  
    def load_tasks(self):  
        try:  
            with open("my_tasks.txt", "r") as file:  
                self.tasks = [line.strip() for line in file]  
                for widget in self.task_box_frame.winfo_children():  
                    widget.destroy()  # Clear existing task boxes  
                for task in self.tasks:  
                    self.create_task_box(task)  # Create a new task box for each loaded task  
            self.update_scroll_region()  # Update the scroll region after loading tasks
            messagebox.showinfo("Load Success", "Tasks loaded successfully!")  
        except FileNotFoundError:  
            messagebox.showwarning("File Error", "No saved tasks found")  

    # Update scroll region to accommodate new tasks
    def update_scroll_region(self):
        self.task_box_frame.update_idletasks()
        self.task_canvas.config(scrollregion=self.task_canvas.bbox("all"))

    # Configure scrollbar region
    def on_frame_configure(self, event):
        self.task_canvas.config(scrollregion=self.task_canvas.bbox("all"))

    # Bind mousewheel event for smooth scrolling
    def _on_mousewheel(self, event):
        self.task_canvas.yview_scroll(int(-1*(event.delta/120)), "units")

if __name__ == "__main__":  
    root = tk.Tk()  
    list = HemaToDoList(root)  
    root.mainloop()  
